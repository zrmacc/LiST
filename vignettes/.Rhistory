theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0$ll
q0
q1
theta0
D = rGenGamma(n=1e3,a=2,b=2,l=2,p=0.2);
time=D$time;
status=D$status;
# Vectorize
dLogIncGamma = Vectorize(dLogIncGamma,vectorize.args="s");
# Events
n = length(time);
nobs = sum(status);
# Observed events
tObs = time[status==1];
tCen = time[status==0];
# Flag presence of censored events
flag = (length(tCen)>0);
## Function to calculate observed information
obsInfo = function(a,b,l){
## Hessian components
# For alpha
Haa = -n*trigamma(a);
# For beta
Hbb = -nobs/(b^2)-(l^b)*(log(l)^2)*sum(tObs^b)-2*(l^b)*log(l)*sum((tObs^b)*log(tObs))-(l^b)*sum((tObs^b)*(log(tObs)^2));
# For lambda
Hll = -nobs*a*b/(l^2)-b*(b-1)*(l^(b-2))*sum(tObs^b);
# For alpha-beta
Hab = nobs*log(l)+sum(log(tObs));
# For alpha-lambda
Hal = nobs*b/l;
# For beta-lambda
Hbl = nobs*a/l-(l^(b-1))*sum(tObs^b)*(1+b*log(l))-b*(l^(b-1))*sum((tObs^b)*log(tObs));
# Add corrections for censoring
if(flag){
## Differentials of (lt)^b;
D1b = (l*tCen)^b*log(l*tCen);
D2b = (l*tCen)^b*(log(l*tCen)^2);
D1l = b*tCen*((l*tCen)^(b-1));
D2l = b*(b-1)*(tCen^2)*((l*tCen)^(b-2));
Dbl = b*tCen*((l*tCen)^(b-1))*log(l*tCen)+tCen*((l*tCen)^(b-1));
## Updates for censoring
# For alpha
Haa = Haa+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="a",Order=2));
# For beta
Hbb = Hbb+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1b)^2);
Hbb = Hbb+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*D2b);
# For lambda
Hll = Hll+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1l)^2);
Hll = Hll+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*D2l);
# For alpha-beta
Hab = Hab+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="as")*D1b);
# For alpha-lambda
Hal = Hal+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="as")*D1l);
# For beta-lambda
Hbl = Hbl+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1b*D1l));
Hbl = Hbl+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*Dbl);
}
# Output
Out = -1*matrix(c(Haa,Hab,Hal,Hab,Hbb,Hbl,Hal,Hbl,Hll),nrow=3,byrow=T);
return(Out);
}
## Function to calculate score
Sa = sum(log(tObs));
Score = function(a,b,l){
# Score for alpha
Ua = -1*n*digamma(a)+nobs*b*log(l)+b*Sa;
# Score for beta
Ub = nobs/b+nobs*a*log(l)+a*Sa-(l^b)*log(l)*sum(tObs^b)-(l^b)*sum((tObs^b)*log(tObs));
# Score for lambda
Ul = nobs*a*b/l-b*(l^(b-1))*sum(tObs^b);
# Add corrections for censoring
if(flag){
## Differentials of (lt)^b
D1b = (l*tCen)^b*log(l*tCen);
D1l = b*tCen*((l*tCen)^(b-1));
# Updates for censoring
Ua = Ua+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="a",Order=1));
Ub = Ub+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s")*D1b);
Ul = Ul+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s")*D1l);
}
# Output
Out = c(Ua,Ub,Ul);
return(Out);
};
## Objective function
Q = function(a,b,l){
# Log likelihood
Out = nobs*(log(b)+a*b*log(l))+a*b*Sa-(l^b)*sum(tObs^b)-n*lgamma(a);
# Add corrections for censoring
if(flag){
Out = Out+sum(log(gammainc(a,(l*tCen)^b)));
}
return(Out);
}
## NR Update
Update = function(a,b,l){
# Current score
U = Score(a,b,l);
# Inverse observed information
Ji = fastInv(obsInfo(a,b,l));
# Proposal
Prop = c(a,b,l) + fastMMp(Ji,U);
# Output
Out = list("a"=Prop[1,1],"b"=Prop[2,1],"l"=Prop[3,1]);
return(Out);
}
## Initialize
# Observed data objective
Qobs = function(a,b){
Sb = sum(tObs^b);
Out = nobs*log(b)-nobs*lgamma(a)+nobs*a*(log(nobs)+log(a)-log(Sb))+a*b*Sa-nobs*a;
return(Out);
}
# Observed data score for alpha
Ua = function(a,b){
Sb = sum(tObs^b);
Out = -nobs*digamma(a)+nobs*(log(nobs)+log(a)-log(Sb))+b*Sa;
return(Out);
}
# Observed data score for beta
Ub = function(a,b){
Sb = sum(tObs^b);
Sbl = sum(tObs^b*log(tObs));
Out = nobs/b-nobs*a*(Sbl/Sb)+a*Sa;
return(Out);
}
# Grid search over alpha
init = function(a){
# Search interval
L = 0.005;
U = 200;
## Search for beta
U1 = function(b){Ub(a,b)};
U1l = U1(L);
U1u = U1(U);
# Estimate beta if a zero is present in the interval
if(sign(U1l)!=sign(U1u)){
b1 = uniroot(U1,lower=L,upper=U,f.lower=U1l,f.upper=U1u)$root;
} else {
b1 = NA;
}
## Search for alpha
U2 = function(a){Ua(a,b1)};
U2l = U2(L);
U2u = U2(U);
if(sign(U2l)!=sign(U2u)){
a1 = uniroot(U2,lower=L,upper=U,f.lower=U2l,f.upper=U2u)$root;
} else {
a1 = NA;
}
# Estimate of Lambda
l1 = (nobs*a1/sum(tObs^b1))^(1/b1);
# Log likelihood
ll = Q(a1,b1,l1);
# Output
Out = list("a"=a1,"b"=b1,"l"=l1,"ll"=ll);
return(Out);
}
# Grid
G = 10^(seq(from=-2,to=2,length.out=101));
Q0 = sapply(G,FUN=function(x){init(x)$ll});
a0 = G[which.max(Q0)];
# Initial parameters
theta0 = init(a0);
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
g
g = function(x){Q(x[1],x[2],x[3])}
a1 = theta0$a;
b1 = theta0$b;
l1 = theta0$l;
grad(g,c(a1,a2,a3))
library(numDeriv)
grad(g,c(a1,a2,a3))
grad(g,c(a1,b1,l1))
a1 = theta0$a;
b1 = theta0$b;
l1 = theta0$l;
J = obsInfo(a=a1,b=b1,l=l1);
Ji = fastInv(J);
J
Ji
a
a1
b1
l1
D = rGenGamma(n=1e3,a=2,b=2,l=2,p=0.2);
time=D$time;
status=D$status;
# Vectorize
dLogIncGamma = Vectorize(dLogIncGamma,vectorize.args="s");
# Events
n = length(time);
nobs = sum(status);
# Observed events
tObs = time[status==1];
tCen = time[status==0];
# Flag presence of censored events
flag = (length(tCen)>0);
## Function to calculate observed information
obsInfo = function(a,b,l){
## Hessian components
# For alpha
Haa = -n*trigamma(a);
# For beta
Hbb = -nobs/(b^2)-(l^b)*(log(l)^2)*sum(tObs^b)-2*(l^b)*log(l)*sum((tObs^b)*log(tObs))-(l^b)*sum((tObs^b)*(log(tObs)^2));
# For lambda
Hll = -nobs*a*b/(l^2)-b*(b-1)*(l^(b-2))*sum(tObs^b);
# For alpha-beta
Hab = nobs*log(l)+sum(log(tObs));
# For alpha-lambda
Hal = nobs*b/l;
# For beta-lambda
Hbl = nobs*a/l-(l^(b-1))*sum(tObs^b)*(1+b*log(l))-b*(l^(b-1))*sum((tObs^b)*log(tObs));
# Add corrections for censoring
if(flag){
## Differentials of (lt)^b;
D1b = (l*tCen)^b*log(l*tCen);
D2b = (l*tCen)^b*(log(l*tCen)^2);
D1l = b*tCen*((l*tCen)^(b-1));
D2l = b*(b-1)*(tCen^2)*((l*tCen)^(b-2));
Dbl = b*tCen*((l*tCen)^(b-1))*log(l*tCen)+tCen*((l*tCen)^(b-1));
## Updates for censoring
# For alpha
Haa = Haa+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="a",Order=2));
# For beta
Hbb = Hbb+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1b)^2);
Hbb = Hbb+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*D2b);
# For lambda
Hll = Hll+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1l)^2);
Hll = Hll+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*D2l);
# For alpha-beta
Hab = Hab+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="as")*D1b);
# For alpha-lambda
Hal = Hal+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="as")*D1l);
# For beta-lambda
Hbl = Hbl+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=2)*(D1b*D1l));
Hbl = Hbl+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s",Order=1)*Dbl);
}
# Output
Out = -1*matrix(c(Haa,Hab,Hal,Hab,Hbb,Hbl,Hal,Hbl,Hll),nrow=3,byrow=T);
return(Out);
}
## Function to calculate score
Sa = sum(log(tObs));
Score = function(a,b,l){
# Score for alpha
Ua = -1*n*digamma(a)+nobs*b*log(l)+b*Sa;
# Score for beta
Ub = nobs/b+nobs*a*log(l)+a*Sa-(l^b)*log(l)*sum(tObs^b)-(l^b)*sum((tObs^b)*log(tObs));
# Score for lambda
Ul = nobs*a*b/l-b*(l^(b-1))*sum(tObs^b);
# Add corrections for censoring
if(flag){
## Differentials of (lt)^b
D1b = (l*tCen)^b*log(l*tCen);
D1l = b*tCen*((l*tCen)^(b-1));
# Updates for censoring
Ua = Ua+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="a",Order=1));
Ub = Ub+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s")*D1b);
Ul = Ul+sum(dLogIncGamma(a=a,s=(l*tCen)^b,Dirn="s")*D1l);
}
# Output
Out = c(Ua,Ub,Ul);
return(Out);
};
## Objective function
Q = function(a,b,l){
# Log likelihood
Out = nobs*(log(b)+a*b*log(l))+a*b*Sa-(l^b)*sum(tObs^b)-n*lgamma(a);
# Add corrections for censoring
if(flag){
Out = Out+sum(log(gammainc(a,(l*tCen)^b)));
}
return(Out);
}
## NR Update
Update = function(a,b,l){
# Current score
U = Score(a,b,l);
# Inverse observed information
Ji = fastInv(obsInfo(a,b,l));
# Proposal
Prop = c(a,b,l) + fastMMp(Ji,U);
# Output
Out = list("a"=Prop[1,1],"b"=Prop[2,1],"l"=Prop[3,1]);
return(Out);
}
## Initialize
# Observed data objective
Qobs = function(a,b){
Sb = sum(tObs^b);
Out = nobs*log(b)-nobs*lgamma(a)+nobs*a*(log(nobs)+log(a)-log(Sb))+a*b*Sa-nobs*a;
return(Out);
}
# Observed data score for alpha
Ua = function(a,b){
Sb = sum(tObs^b);
Out = -nobs*digamma(a)+nobs*(log(nobs)+log(a)-log(Sb))+b*Sa;
return(Out);
}
# Observed data score for beta
Ub = function(a,b){
Sb = sum(tObs^b);
Sbl = sum(tObs^b*log(tObs));
Out = nobs/b-nobs*a*(Sbl/Sb)+a*Sa;
return(Out);
}
# Grid search over alpha
init = function(a){
# Search interval
L = 0.005;
U = 200;
## Search for beta
U1 = function(b){Ub(a,b)};
U1l = U1(L);
U1u = U1(U);
# Estimate beta if a zero is present in the interval
if(sign(U1l)!=sign(U1u)){
b1 = uniroot(U1,lower=L,upper=U,f.lower=U1l,f.upper=U1u)$root;
} else {
b1 = NA;
}
## Search for alpha
U2 = function(a){Ua(a,b1)};
U2l = U2(L);
U2u = U2(U);
if(sign(U2l)!=sign(U2u)){
a1 = uniroot(U2,lower=L,upper=U,f.lower=U2l,f.upper=U2u)$root;
} else {
a1 = NA;
}
# Estimate of Lambda
l1 = (nobs*a1/sum(tObs^b1))^(1/b1);
# Log likelihood
ll = Q(a1,b1,l1);
# Output
Out = list("a"=a1,"b"=b1,"l"=l1,"ll"=ll);
return(Out);
}
# Grid
G = 10^(seq(from=-2,to=2,length.out=101));
Q0 = sapply(G,FUN=function(x){init(x)$ll});
a0 = G[which.max(Q0)];
# Initial parameters
theta0 = init(a0);
## Newton-Raphson
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
theta0 = init(a0);
theta0
Q0
theta0
for(i in 1:maxit){
# Propose update
theta1 = Update(a=theta0$a,b=theta0$b,l=theta0$l);
# Proposed objective
theta1$ll = Q(a=theta1$a,b=theta1$b,l=theta1$l);
# Accept first update,
# Otherwise, check for improvement
if(i==1){
theta0 = theta1;
} else {
delta = theta1$ll-theta0$ll;
if(delta>0){
theta0 = theta1;
};
if(delta<eps){
break;
}
}
};
theta0
install.packages("rmarkdown")
library(rmarkdown)
M
