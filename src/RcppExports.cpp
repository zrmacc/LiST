// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// exchCorr
SEXP exchCorr(const int n, const double r);
RcppExport SEXP _ScoreTest_exchCorr(SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(exchCorr(n, r));
    return rcpp_result_gen;
END_RCPP
}
// Alpha0
SEXP Alpha0(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> R, const Eigen::Map<Eigen::VectorXd> y);
RcppExport SEXP _ScoreTest_Alpha0(SEXP XSEXP, SEXP RSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Alpha0(X, R, y));
    return rcpp_result_gen;
END_RCPP
}
// Tau1
SEXP Tau1(const Eigen::Map<Eigen::MatrixXd> D, const Eigen::Map<Eigen::MatrixXd> R, const Eigen::Map<Eigen::VectorXd> y);
RcppExport SEXP _ScoreTest_Tau1(SEXP DSEXP, SEXP RSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Tau1(D, R, y));
    return rcpp_result_gen;
END_RCPP
}
// Info
SEXP Info(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> G, const Eigen::Map<Eigen::MatrixXd> R, const double tau);
RcppExport SEXP _ScoreTest_Info(SEXP XSEXP, SEXP GSEXP, SEXP RSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Info(X, G, R, tau));
    return rcpp_result_gen;
END_RCPP
}
// SchurC
SEXP SchurC(const Eigen::Map<Eigen::MatrixXd> Igg, const Eigen::Map<Eigen::MatrixXd> Ihh, const Eigen::Map<Eigen::MatrixXd> Igh, const bool inv);
RcppExport SEXP _ScoreTest_SchurC(SEXP IggSEXP, SEXP IhhSEXP, SEXP IghSEXP, SEXP invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Igg(IggSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Ihh(IhhSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Igh(IghSEXP);
    Rcpp::traits::input_parameter< const bool >::type inv(invSEXP);
    rcpp_result_gen = Rcpp::wrap(SchurC(Igg, Ihh, Igh, inv));
    return rcpp_result_gen;
END_RCPP
}
// ScoreB
SEXP ScoreB(const Eigen::Map<Eigen::VectorXd> e0, const Eigen::Map<Eigen::MatrixXd> G, const Eigen::Map<Eigen::MatrixXd> R, const double tau);
RcppExport SEXP _ScoreTest_ScoreB(SEXP e0SEXP, SEXP GSEXP, SEXP RSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreB(e0, G, R, tau));
    return rcpp_result_gen;
END_RCPP
}
// qForm
SEXP qForm(const Eigen::Map<Eigen::MatrixXd> K, const Eigen::VectorXd s);
RcppExport SEXP _ScoreTest_qForm(SEXP KSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(qForm(K, s));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ScoreTest_exchCorr", (DL_FUNC) &_ScoreTest_exchCorr, 2},
    {"_ScoreTest_Alpha0", (DL_FUNC) &_ScoreTest_Alpha0, 3},
    {"_ScoreTest_Tau1", (DL_FUNC) &_ScoreTest_Tau1, 3},
    {"_ScoreTest_Info", (DL_FUNC) &_ScoreTest_Info, 4},
    {"_ScoreTest_SchurC", (DL_FUNC) &_ScoreTest_SchurC, 4},
    {"_ScoreTest_ScoreB", (DL_FUNC) &_ScoreTest_ScoreB, 4},
    {"_ScoreTest_qForm", (DL_FUNC) &_ScoreTest_qForm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ScoreTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
