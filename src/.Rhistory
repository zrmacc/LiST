# Loop over MC replicates
Reps = foreach(r=1:R,.combine=rbind) %dopar% {
# Simulate phenotype
y = eta + rnorm(n=n);
# Score test of b.g = 0
p = NormScore(y=y,G=Dx[,1],X=Dx[,2:3])[3];
return(p);
}
# Estimate power
P = mean(Reps<=0.05);
P
gamma
pi
1-pi
head(Dx)
Dx[,1]
mean(Dx[,1])
var(Dx[,1])
k=4
# Current power
pi = gamma[k];
# Set genotypic effect
b.g = max((Za-qnorm(1-pi))/sqrt(n*vg),0);
# Linear predictor
eta = Dx %*% c(b.g,0.05,0.05);
# Loop over MC replicates
Reps = foreach(r=1:R,.combine=rbind) %dopar% {
# Simulate phenotype
y = eta + rnorm(n=n);
# Score test of b.g = 0
p = NormScore(y=y,G=Dx[,1],X=Dx[,2:3])[3];
return(p);
}
# Estimate power
P = mean(Reps<=0.05);
P
x = rnorm(n=n);
n = 100;
x = rnorm(n=n);
x
mean(x)
var(x)
b
b = 0
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
v = 1
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
y
D = cbind("x"=x,"y"=y);
D
require(RcppEigen);
require(doMC);
doMC::registerDoMC(cores=3);
B
B=100
n = length(x);
n
Draw = sample(size=n,replace=T);
Draw = sample.int(size=n,replace=T);
n
Draw = sample.int(n=n,replace=T);
Draw
sort(Draw)
M = RcppEigen::fastLmPure(X=x,y=y)p
M = RcppEigen::fastLmPure(X=x,y=y);
X
x
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
M
Wald = M$coefficients/M$se;
Wald
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
Wald = calcT(x=x[Draw],y=y[Draw]);
Wald
qt
? qt
R = foreach(i=1:B,.combine=c,.inorder=F) %dopar% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
a = 0.05
R = foreach(i=1:B,.combine=c,.inorder=F) %dopar% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
R
mean(R)
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(i=1:B,.combine=c,.inorder=F) %dopar% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %dopar% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
D = genData(n=n,b=0);
require(RcppEigen);
require(doMC);
## Parameters
# Sample size
n = 100;
# Coefficient
b = 0;
# Parallelize
doMC::registerDoMC(cores=3);
#' Function to generate data
#' @param n Sample size
#' @param b Coefficient
#' @param v Residual variance
genData = function(n,b=0,v=1){
# Generate covariate
x = rnorm(n=n);
# Generate phenotype
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
# Data
D = cbind("x"=x,"y"=y);
return(D);
}
#' Function to calculate T stat
#' @param x Covariate
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
## Sampling Distribution of Rejection Probability
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
}
D = genData(n=n,b=0);
r
R
rm(R)
D = genData(n=n,b=0);
D
head(D)
p = estRej(x=D[,1],y=D[,2]);
p
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2]);
return(p);
}
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2]);
return(p);
}
pi
mean(pi)
median(pi)
plot(density(pi))
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e3);
return(p);
}
plot(density(pi))
mean(pi)
var(pi)
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=sqrt(B)*qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e2);
return(p);
}
pi
require(RcppEigen);
require(doMC);
## Parameters
# Sample size
n = 100;
# Coefficient
b = 0;
# Parallelize
doMC::registerDoMC(cores=3);
#' Function to generate data
#' @param n Sample size
#' @param b Coefficient
#' @param v Residual variance
genData = function(n,b=0,v=1){
# Generate covariate
x = rnorm(n=n);
# Generate phenotype
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
# Data
D = cbind("x"=x,"y"=y);
return(D);
}
#' Function to calculate T stat
#' @param x Covariate
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=sqrt(B)*qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
## Sampling Distribution of Rejection Probability
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e2);
return(p);
}
mea(pi)
mean(pi)
var(pi)
require(RcppEigen);
require(doMC);
## Parameters
# Sample size
n = 100;
# Coefficient
b = 0;
# Parallelize
doMC::registerDoMC(cores=3);
#' Function to generate data
#' @param n Sample size
#' @param b Coefficient
#' @param v Residual variance
genData = function(n,b=0,v=1){
# Generate covariate
x = rnorm(n=n);
# Generate phenotype
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
# Data
D = cbind("x"=x,"y"=y);
return(D);
}
#' Function to calculate T stat
#' @param x Covariate
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
## Sampling Distribution of Rejection Probability
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e2);
return(p);
}
mean(pi)
require(RcppEigen);
require(doMC);
## Parameters
# Sample size
n = 100;
# Coefficient
b = 0;
# Parallelize
doMC::registerDoMC(cores=3);
#' Function to generate data
#' @param n Sample size
#' @param b Coefficient
#' @param v Residual variance
genData = function(n,b=0,v=1){
# Generate covariate
x = rnorm(n=n);
# Generate phenotype
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
# Data
D = cbind("x"=x,"y"=y);
return(D);
}
#' Function to calculate T stat
#' @param x Covariate
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
## Sampling Distribution of Rejection Probability
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e2);
return(p);
}
mean(pi)
require(RcppEigen);
require(doMC);
## Parameters
# Sample size
n = 100;
# Coefficient
b = 0;
# Parallelize
doMC::registerDoMC(cores=3);
#' Function to generate data
#' @param n Sample size
#' @param b Coefficient
#' @param v Residual variance
genData = function(n,b=0,v=1){
# Generate covariate
x = rnorm(n=n);
# Generate phenotype
y = x*b + rnorm(n=n,mean=0,sd=sqrt(v));
# Data
D = cbind("x"=x,"y"=y);
return(D);
}
#' Function to calculate T stat
#' @param x Covariate
#' @param y Phenotype
calcT = function(x,y){
# Model
M = RcppEigen::fastLmPure(X=data.matrix(x),y=y);
# Stat
Wald = M$coefficients/M$se;
return(Wald);
}
#' Function to estimate rejection probability
#' @param x Covariate
#' @param y Phenotype
#' @param B Bootstraps
#' @param a Alpha
estRej = function(x,y,B=100,a=0.05){
n = length(x);
R = foreach(b=1:B,.combine=c,.inorder=F) %do% {
# Resample
Draw = sample.int(n=n,replace=T);
# T test
Wald = calcT(x=x[Draw],y=y[Draw]);
# Rejection indicator
return(1*(abs(Wald)>=qt(p=1-a/2,df=(n-1))))
}
return(mean(R))
}
## Sampling Distribution of Rejection Probability
# MC Replicates
R = 1e3;
pi = foreach(r=1:R,.combine=c,.inorder=F) %dopar% {
# Generate data
D = genData(n=n,b=0);
# Bootstrap Estimate of Rejection Probability
p = estRej(x=D[,1],y=D[,2],B=1e3);
return(p);
}
mean(pi)
var(pi)
setwd("~/Dropbox/Computation/Packages/NormalScoreTest/NormalScoreTest/src/")
dir()
Rcpp::sourceCpp(file="Matrix.cpp");
